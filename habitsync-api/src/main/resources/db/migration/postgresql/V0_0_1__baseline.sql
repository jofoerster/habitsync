CREATE SEQUENCE IF NOT EXISTS challenge_seq START WITH 1 INCREMENT BY 50;

CREATE SEQUENCE IF NOT EXISTS vote_seq START WITH 1 INCREMENT BY 50;

CREATE TABLE account
(
    authentication_id                    VARCHAR(255) NOT NULL,
    user_name                            VARCHAR(255),
    email                                VARCHAR(255),
    display_name                         VARCHAR(255),
    enable_internal_habit_tracker        BOOLEAN,
    notification_creation_hour           INTEGER      NOT NULL,
    notification_creation_frequency_days INTEGER      NOT NULL,
    send_notifications_via_email         BOOLEAN      NOT NULL,
    allowed_notifications                SMALLINT,
    apprise_target_urls                  VARCHAR(255),
    account_status                       SMALLINT,
    CONSTRAINT pk_account PRIMARY KEY (authentication_id)
);

CREATE TABLE challenge
(
    id                        BIGINT NOT NULL,
    creator_authentication_id VARCHAR(255),
    status                    SMALLINT,
    rule_id                   BIGINT,
    start_date                date,
    end_date                  date,
    title                     VARCHAR(255),
    description               TEXT,
    computation_type          SMALLINT,
    CONSTRAINT pk_challenge PRIMARY KEY (id)
);

CREATE TABLE challenge_result
(
    percentage_reached     DOUBLE PRECISION,
    number_of_days_reached INTEGER,
    placement              INTEGER,
    account_id             VARCHAR(255) NOT NULL,
    challenge_id           BIGINT       NOT NULL,
    CONSTRAINT pk_challengeresult PRIMARY KEY (account_id, challenge_id)
);

CREATE TABLE habit_number_modal_config
(
    habit_uuid    VARCHAR(255) NOT NULL,
    config_values VARCHAR(255),
    CONSTRAINT pk_habitnumbermodalconfig PRIMARY KEY (habit_uuid)
);

CREATE TABLE habit_records
(
    uuid         VARCHAR(255) NOT NULL,
    parent_uuid  VARCHAR(255),
    record_date  INTEGER,
    record_type  INTEGER,
    record_value DOUBLE PRECISION,
    createt      BIGINT,
    modifyt      BIGINT,
    reason       VARCHAR(255),
    session_id   VARCHAR(255),
    CONSTRAINT pk_habit_records PRIMARY KEY (uuid)
);

CREATE TABLE habits
(
    uuid                      VARCHAR(255) NOT NULL,
    account_authentication_id VARCHAR(255),
    createt                   BIGINT,
    modifyt                   BIGINT,
    type                      INTEGER,
    status                    INTEGER,
    name                      VARCHAR(255),
    "desc"                    VARCHAR(255),
    color                     INTEGER,
    daily_goal                DOUBLE PRECISION,
    daily_goal_unit           VARCHAR(255),
    daily_goal_extra          DOUBLE PRECISION,
    freq_type                 INTEGER,
    freq_custom               VARCHAR(255),
    start_date                INTEGER,
    target_days               INTEGER,
    reminder_custom           TEXT,
    reminder_quest            VARCHAR(255),
    sort_position             DOUBLE PRECISION,
    challenge_habit           BOOLEAN      NOT NULL,
    habit_type                SMALLINT,
    connected_shared_habit_id BIGINT,
    CONSTRAINT pk_habits PRIMARY KEY (uuid)
);

CREATE TABLE notification
(
    id                                 BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    receiver_account_authentication_id VARCHAR(255),
    sender_account_authentication_id   VARCHAR(255),
    status                             SMALLINT,
    timestamp                          TIMESTAMP WITHOUT TIME ZONE,
    content                            TEXT,
    html_content                       TEXT,
    html_content_shade                 TEXT,
    html_content_shade_minimal         TEXT,
    subject                            TEXT,
    shared_habit_it                    BIGINT,
    identifier                         INTEGER                                 NOT NULL,
    CONSTRAINT pk_notification PRIMARY KEY (id)
);

CREATE TABLE notification_rule
(
    id                                             BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    index                                          INTEGER,
    rule_name                                      VARCHAR(255),
    notification_template_id                       BIGINT,
    shared_habit_id                                BIGINT,
    enabled                                        BOOLEAN                                 NOT NULL,
    internal_habit_for_computation_of_goal_uuid    VARCHAR(255),
    percentage_of_goal_for_notification_trigger    INTEGER,
    days_of_no_new_record_for_notification_trigger INTEGER,
    last_time_notification_was_sent                date,
    CONSTRAINT pk_notificationrule PRIMARY KEY (id)
);

CREATE TABLE notification_rule_status
(
    rule_identifier VARCHAR(255) NOT NULL,
    is_active       BOOLEAN      NOT NULL,
    CONSTRAINT pk_notificationrulestatus PRIMARY KEY (rule_identifier)
);

CREATE TABLE notification_template
(
    id                               BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    subject_template                 TEXT,
    content_template_name            VARCHAR(255),
    html_template_name               VARCHAR(255),
    html_shade_template_name         VARCHAR(255),
    html_shade_minimal_template_name VARCHAR(255),
    notification_type                SMALLINT,
    CONSTRAINT pk_notificationtemplate PRIMARY KEY (id)
);

CREATE TABLE shared_habit_mappings
(
    habit_id        VARCHAR(255) NOT NULL,
    shared_habit_id BIGINT       NOT NULL
);

CREATE TABLE shared_habit_result
(
    percentage      DOUBLE PRECISION,
    placement       INTEGER,
    date            date         NOT NULL,
    account_id      VARCHAR(255) NOT NULL,
    shared_habit_id BIGINT       NOT NULL,
    CONSTRAINT pk_sharedhabitresult PRIMARY KEY (date, account_id, shared_habit_id)
);

CREATE TABLE shared_habits
(
    id                         BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    share_code                 VARCHAR(255),
    title                      VARCHAR(255),
    description                TEXT,
    create_time                BIGINT,
    main_notification_rule_id  BIGINT,
    allow_editing_of_all_users BOOLEAN,
    owner_authentication_id    VARCHAR(255),
    CONSTRAINT pk_shared_habits PRIMARY KEY (id)
);

CREATE TABLE vote
(
    id                        BIGINT  NOT NULL,
    account_authentication_id VARCHAR(255),
    challenge_id              BIGINT,
    vote_value                INTEGER NOT NULL,
    CONSTRAINT pk_vote PRIMARY KEY (id)
);

ALTER TABLE shared_habits
    ADD CONSTRAINT uc_shared_habits_sharecode UNIQUE (share_code);

ALTER TABLE challenge_result
    ADD CONSTRAINT FK_CHALLENGERESULT_ON_ACCOUNT FOREIGN KEY (account_id) REFERENCES account (authentication_id);

ALTER TABLE challenge_result
    ADD CONSTRAINT FK_CHALLENGERESULT_ON_CHALLENGE FOREIGN KEY (challenge_id) REFERENCES challenge (id);

ALTER TABLE challenge
    ADD CONSTRAINT FK_CHALLENGE_ON_CREATOR_AUTHENTICATIONID FOREIGN KEY (creator_authentication_id) REFERENCES account (authentication_id);

ALTER TABLE challenge
    ADD CONSTRAINT FK_CHALLENGE_ON_RULE FOREIGN KEY (rule_id) REFERENCES notification_rule (id);

ALTER TABLE habits
    ADD CONSTRAINT FK_HABITS_ON_ACCOUNT_AUTHENTICATIONID FOREIGN KEY (account_authentication_id) REFERENCES account (authentication_id);

ALTER TABLE notification_rule
    ADD CONSTRAINT FK_NOTIFICATIONRULE_ON_INTERNALHABITFORCOMPUTATIONOFGOAL_UUID FOREIGN KEY (internal_habit_for_computation_of_goal_uuid) REFERENCES habits (uuid);

ALTER TABLE notification_rule
    ADD CONSTRAINT FK_NOTIFICATIONRULE_ON_NOTIFICATIONTEMPLATE FOREIGN KEY (notification_template_id) REFERENCES notification_template (id);

ALTER TABLE notification_rule
    ADD CONSTRAINT FK_NOTIFICATIONRULE_ON_SHAREDHABIT FOREIGN KEY (shared_habit_id) REFERENCES shared_habits (id);

ALTER TABLE notification
    ADD CONSTRAINT FK_NOTIFICATION_ON_RECEIVERACCOUNT_AUTHENTICATIONID FOREIGN KEY (receiver_account_authentication_id) REFERENCES account (authentication_id);

ALTER TABLE notification
    ADD CONSTRAINT FK_NOTIFICATION_ON_SENDERACCOUNT_AUTHENTICATIONID FOREIGN KEY (sender_account_authentication_id) REFERENCES account (authentication_id);

ALTER TABLE shared_habit_result
    ADD CONSTRAINT FK_SHAREDHABITRESULT_ON_ACCOUNT FOREIGN KEY (account_id) REFERENCES account (authentication_id);

ALTER TABLE shared_habit_result
    ADD CONSTRAINT FK_SHAREDHABITRESULT_ON_SHARED_HABIT FOREIGN KEY (shared_habit_id) REFERENCES shared_habits (id);

ALTER TABLE shared_habits
    ADD CONSTRAINT FK_SHARED_HABITS_ON_OWNER_AUTHENTICATIONID FOREIGN KEY (owner_authentication_id) REFERENCES account (authentication_id);

ALTER TABLE vote
    ADD CONSTRAINT FK_VOTE_ON_ACCOUNT_AUTHENTICATIONID FOREIGN KEY (account_authentication_id) REFERENCES account (authentication_id);

ALTER TABLE vote
    ADD CONSTRAINT FK_VOTE_ON_CHALLENGE FOREIGN KEY (challenge_id) REFERENCES challenge (id);

ALTER TABLE shared_habit_mappings
    ADD CONSTRAINT fk_shahabmap_on_habit FOREIGN KEY (habit_id) REFERENCES habits (uuid);

ALTER TABLE shared_habit_mappings
    ADD CONSTRAINT fk_shahabmap_on_shared_habit FOREIGN KEY (shared_habit_id) REFERENCES shared_habits (id);



-- Thanks to Patrick Lightbody for submitting this...
--
-- In your Quartz properties file, you'll need to set
-- org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.PostgreSQLDelegate

DROP TABLE IF EXISTS QRTZ_FIRED_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_PAUSED_TRIGGER_GRPS;
DROP TABLE IF EXISTS QRTZ_SCHEDULER_STATE;
DROP TABLE IF EXISTS QRTZ_LOCKS;
DROP TABLE IF EXISTS QRTZ_SIMPLE_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_CRON_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_SIMPROP_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_BLOB_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_JOB_DETAILS;
DROP TABLE IF EXISTS QRTZ_CALENDARS;

CREATE TABLE QRTZ_JOB_DETAILS
(
    SCHED_NAME        VARCHAR(120) NOT NULL,
    JOB_NAME          VARCHAR(200) NOT NULL,
    JOB_GROUP         VARCHAR(200) NOT NULL,
    DESCRIPTION       VARCHAR(250) NULL,
    JOB_CLASS_NAME    VARCHAR(250) NOT NULL,
    IS_DURABLE        BOOL         NOT NULL,
    IS_NONCONCURRENT  BOOL         NOT NULL,
    IS_UPDATE_DATA    BOOL         NOT NULL,
    REQUESTS_RECOVERY BOOL         NOT NULL,
    JOB_DATA          BYTEA        NULL,
    PRIMARY KEY (SCHED_NAME, JOB_NAME, JOB_GROUP)
);

CREATE TABLE QRTZ_TRIGGERS
(
    SCHED_NAME     VARCHAR(120) NOT NULL,
    TRIGGER_NAME   VARCHAR(200) NOT NULL,
    TRIGGER_GROUP  VARCHAR(200) NOT NULL,
    JOB_NAME       VARCHAR(200) NOT NULL,
    JOB_GROUP      VARCHAR(200) NOT NULL,
    DESCRIPTION    VARCHAR(250) NULL,
    NEXT_FIRE_TIME BIGINT       NULL,
    PREV_FIRE_TIME BIGINT       NULL,
    PRIORITY       INTEGER      NULL,
    TRIGGER_STATE  VARCHAR(16)  NOT NULL,
    TRIGGER_TYPE   VARCHAR(8)   NOT NULL,
    START_TIME     BIGINT       NOT NULL,
    END_TIME       BIGINT       NULL,
    CALENDAR_NAME  VARCHAR(200) NULL,
    MISFIRE_INSTR  SMALLINT     NULL,
    JOB_DATA       BYTEA        NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, JOB_NAME, JOB_GROUP)
        REFERENCES QRTZ_JOB_DETAILS (SCHED_NAME, JOB_NAME, JOB_GROUP)
);

CREATE TABLE QRTZ_SIMPLE_TRIGGERS
(
    SCHED_NAME      VARCHAR(120) NOT NULL,
    TRIGGER_NAME    VARCHAR(200) NOT NULL,
    TRIGGER_GROUP   VARCHAR(200) NOT NULL,
    REPEAT_COUNT    BIGINT       NOT NULL,
    REPEAT_INTERVAL BIGINT       NOT NULL,
    TIMES_TRIGGERED BIGINT       NOT NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
);

CREATE TABLE QRTZ_CRON_TRIGGERS
(
    SCHED_NAME      VARCHAR(120) NOT NULL,
    TRIGGER_NAME    VARCHAR(200) NOT NULL,
    TRIGGER_GROUP   VARCHAR(200) NOT NULL,
    CRON_EXPRESSION VARCHAR(120) NOT NULL,
    TIME_ZONE_ID    VARCHAR(80),
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
);

CREATE TABLE QRTZ_SIMPROP_TRIGGERS
(
    SCHED_NAME    VARCHAR(120)   NOT NULL,
    TRIGGER_NAME  VARCHAR(200)   NOT NULL,
    TRIGGER_GROUP VARCHAR(200)   NOT NULL,
    STR_PROP_1    VARCHAR(512)   NULL,
    STR_PROP_2    VARCHAR(512)   NULL,
    STR_PROP_3    VARCHAR(512)   NULL,
    INT_PROP_1    INT            NULL,
    INT_PROP_2    INT            NULL,
    LONG_PROP_1   BIGINT         NULL,
    LONG_PROP_2   BIGINT         NULL,
    DEC_PROP_1    NUMERIC(13, 4) NULL,
    DEC_PROP_2    NUMERIC(13, 4) NULL,
    BOOL_PROP_1   BOOL           NULL,
    BOOL_PROP_2   BOOL           NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
);

CREATE TABLE QRTZ_BLOB_TRIGGERS
(
    SCHED_NAME    VARCHAR(120) NOT NULL,
    TRIGGER_NAME  VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    BLOB_DATA     BYTEA        NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
);

CREATE TABLE QRTZ_CALENDARS
(
    SCHED_NAME    VARCHAR(120) NOT NULL,
    CALENDAR_NAME VARCHAR(200) NOT NULL,
    CALENDAR      BYTEA        NOT NULL,
    PRIMARY KEY (SCHED_NAME, CALENDAR_NAME)
);


CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS
(
    SCHED_NAME    VARCHAR(120) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_GROUP)
);

CREATE TABLE QRTZ_FIRED_TRIGGERS
(
    SCHED_NAME        VARCHAR(120) NOT NULL,
    ENTRY_ID          VARCHAR(95)  NOT NULL,
    TRIGGER_NAME      VARCHAR(200) NOT NULL,
    TRIGGER_GROUP     VARCHAR(200) NOT NULL,
    INSTANCE_NAME     VARCHAR(200) NOT NULL,
    FIRED_TIME        BIGINT       NOT NULL,
    SCHED_TIME        BIGINT       NOT NULL,
    PRIORITY          INTEGER      NOT NULL,
    STATE             VARCHAR(16)  NOT NULL,
    JOB_NAME          VARCHAR(200) NULL,
    JOB_GROUP         VARCHAR(200) NULL,
    IS_NONCONCURRENT  BOOL         NULL,
    REQUESTS_RECOVERY BOOL         NULL,
    PRIMARY KEY (SCHED_NAME, ENTRY_ID)
);

CREATE TABLE QRTZ_SCHEDULER_STATE
(
    SCHED_NAME        VARCHAR(120) NOT NULL,
    INSTANCE_NAME     VARCHAR(200) NOT NULL,
    LAST_CHECKIN_TIME BIGINT       NOT NULL,
    CHECKIN_INTERVAL  BIGINT       NOT NULL,
    PRIMARY KEY (SCHED_NAME, INSTANCE_NAME)
);

CREATE TABLE QRTZ_LOCKS
(
    SCHED_NAME VARCHAR(120) NOT NULL,
    LOCK_NAME  VARCHAR(40)  NOT NULL,
    PRIMARY KEY (SCHED_NAME, LOCK_NAME)
);

CREATE INDEX IDX_QRTZ_J_REQ_RECOVERY
    ON QRTZ_JOB_DETAILS (SCHED_NAME, REQUESTS_RECOVERY);
CREATE INDEX IDX_QRTZ_J_GRP
    ON QRTZ_JOB_DETAILS (SCHED_NAME, JOB_GROUP);

CREATE INDEX IDX_QRTZ_T_J
    ON QRTZ_TRIGGERS (SCHED_NAME, JOB_NAME, JOB_GROUP);
CREATE INDEX IDX_QRTZ_T_JG
    ON QRTZ_TRIGGERS (SCHED_NAME, JOB_GROUP);
CREATE INDEX IDX_QRTZ_T_C
    ON QRTZ_TRIGGERS (SCHED_NAME, CALENDAR_NAME);
CREATE INDEX IDX_QRTZ_T_G
    ON QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_GROUP);
CREATE INDEX IDX_QRTZ_T_STATE
    ON QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_N_STATE
    ON QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP, TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_N_G_STATE
    ON QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_GROUP, TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_NEXT_FIRE_TIME
    ON QRTZ_TRIGGERS (SCHED_NAME, NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_ST
    ON QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_STATE, NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_MISFIRE
    ON QRTZ_TRIGGERS (SCHED_NAME, MISFIRE_INSTR, NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE
    ON QRTZ_TRIGGERS (SCHED_NAME, MISFIRE_INSTR, NEXT_FIRE_TIME, TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE_GRP
    ON QRTZ_TRIGGERS (SCHED_NAME, MISFIRE_INSTR, NEXT_FIRE_TIME, TRIGGER_GROUP, TRIGGER_STATE);

CREATE INDEX IDX_QRTZ_FT_TRIG_INST_NAME
    ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, INSTANCE_NAME);
CREATE INDEX IDX_QRTZ_FT_INST_JOB_REQ_RCVRY
    ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, INSTANCE_NAME, REQUESTS_RECOVERY);
CREATE INDEX IDX_QRTZ_FT_J_G
    ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, JOB_NAME, JOB_GROUP);
CREATE INDEX IDX_QRTZ_FT_JG
    ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, JOB_GROUP);
CREATE INDEX IDX_QRTZ_FT_T_G
    ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP);
CREATE INDEX IDX_QRTZ_FT_TG
    ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, TRIGGER_GROUP);


COMMIT;

CREATE TABLE SPRING_SESSION (
                                PRIMARY_ID CHAR(36) NOT NULL,
                                SESSION_ID CHAR(36) NOT NULL,
                                CREATION_TIME BIGINT NOT NULL,
                                LAST_ACCESS_TIME BIGINT NOT NULL,
                                MAX_INACTIVE_INTERVAL INT NOT NULL,
                                EXPIRY_TIME BIGINT NOT NULL,
                                PRINCIPAL_NAME VARCHAR(100),
                                CONSTRAINT SPRING_SESSION_PK PRIMARY KEY (PRIMARY_ID)
);

CREATE UNIQUE INDEX SPRING_SESSION_IX1 ON SPRING_SESSION (SESSION_ID);
CREATE INDEX SPRING_SESSION_IX2 ON SPRING_SESSION (EXPIRY_TIME);
CREATE INDEX SPRING_SESSION_IX3 ON SPRING_SESSION (PRINCIPAL_NAME);

CREATE TABLE SPRING_SESSION_ATTRIBUTES (
                                           SESSION_PRIMARY_ID CHAR(36) NOT NULL,
                                           ATTRIBUTE_NAME VARCHAR(200) NOT NULL,
                                           ATTRIBUTE_BYTES BYTEA NOT NULL,
                                           CONSTRAINT SPRING_SESSION_ATTRIBUTES_PK PRIMARY KEY (SESSION_PRIMARY_ID, ATTRIBUTE_NAME),
                                           CONSTRAINT SPRING_SESSION_ATTRIBUTES_FK FOREIGN KEY (SESSION_PRIMARY_ID) REFERENCES SPRING_SESSION(PRIMARY_ID) ON DELETE CASCADE
);
