name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.2.3)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'habitsync-ui/package-lock.json'

      - name: Install UI dependencies
        run: |
          cd habitsync-ui
          npm ci

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run API tests
        run: |
          cd habitsync-api
          mvn clean test

  build-android:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'habitsync-ui/package-lock.json'

      - name: Install UI dependencies
        run: |
          cd habitsync-ui
          npm ci

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Expo CLI
        run: npm install -g @expo/cli

      - name: Prebuild Android project
        run: |
          cd habitsync-ui
          npx expo prebuild --platform android --clear

      - name: Setup Android signing
        if: ${{ secrets.ANDROID_KEYSTORE_BASE64 != '' }}
        run: |
          cd habitsync-ui
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android-keystore.jks
          
          mkdir -p android/app
          cat > android/gradle.properties << EOF
          MYAPP_RELEASE_STORE_FILE=../../android-keystore.jks
          MYAPP_RELEASE_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}
          MYAPP_RELEASE_STORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          MYAPP_RELEASE_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}
          EOF

      - name: Make gradlew executable and build APK
        run: |
          cd habitsync-ui
          chmod +x android/gradlew
          cd android
          ./gradlew assembleRelease

      - name: Verify and rename APK
        run: |
          cd habitsync-ui
          APK_PATH="android/app/build/outputs/apk/release"
          VERSION="${{ github.event.inputs.version }}"
          
          if [ ! -f "$APK_PATH/app-release.apk" ]; then
            echo "ERROR: APK file not found at $APK_PATH/app-release.apk"
            ls -la "$APK_PATH/" || echo "Directory doesn't exist"
            exit 1
          fi
          
          mv "$APK_PATH/app-release.apk" "$APK_PATH/habitsync-v$VERSION.apk"
          echo "APK created: $APK_PATH/habitsync-v$VERSION.apk"
          ls -la "$APK_PATH/habitsync-v$VERSION.apk"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: habitsync-ui/android/app/build/outputs/apk/release/habitsync-v*.apk

  release:
    needs: [test, build-android]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "ERROR: Invalid version format. Use semantic versioning (e.g., 1.2.3)"
            exit 1
          fi
          if git tag -l | grep -q "^v$VERSION$"; then
            echo "ERROR: Tag v$VERSION already exists"
            exit 1
          fi

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.version }}

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ github.event.inputs.version }}" -m "Release v${{ github.event.inputs.version }}"
          git push origin "v${{ github.event.inputs.version }}"

      - name: Generate changelog
        id: changelog
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$LATEST_TAG" ]; then
            CHANGELOG=$(git log ${LATEST_TAG}..HEAD --oneline --pretty=format:"- %s" | head -20)
          else
            CHANGELOG=$(git log --oneline --pretty=format:"- %s" | head -20)
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: ./apk

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          body: |
            ## Changes
            ${{ steps.changelog.outputs.changelog }}
            
            ## Downloads
            - **Android APK**: See attached files below
            
            ## Docker Image
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.version }}
            ```
          files: ./apk/*.apk
          draft: false
          prerelease: false
